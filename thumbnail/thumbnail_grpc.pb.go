// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: thumbnail.proto

package thumbnail

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ThubmnailDownloaderClient is the client API for ThubmnailDownloader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThubmnailDownloaderClient interface {
	Download(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type thubmnailDownloaderClient struct {
	cc grpc.ClientConnInterface
}

func NewThubmnailDownloaderClient(cc grpc.ClientConnInterface) ThubmnailDownloaderClient {
	return &thubmnailDownloaderClient{cc}
}

func (c *thubmnailDownloaderClient) Download(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/service.ThubmnailDownloader/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThubmnailDownloaderServer is the server API for ThubmnailDownloader service.
// All implementations must embed UnimplementedThubmnailDownloaderServer
// for forward compatibility
type ThubmnailDownloaderServer interface {
	Download(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedThubmnailDownloaderServer()
}

// UnimplementedThubmnailDownloaderServer must be embedded to have forward compatible implementations.
type UnimplementedThubmnailDownloaderServer struct {
}

func (UnimplementedThubmnailDownloaderServer) Download(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedThubmnailDownloaderServer) mustEmbedUnimplementedThubmnailDownloaderServer() {}

// UnsafeThubmnailDownloaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThubmnailDownloaderServer will
// result in compilation errors.
type UnsafeThubmnailDownloaderServer interface {
	mustEmbedUnimplementedThubmnailDownloaderServer()
}

func RegisterThubmnailDownloaderServer(s grpc.ServiceRegistrar, srv ThubmnailDownloaderServer) {
	s.RegisterService(&ThubmnailDownloader_ServiceDesc, srv)
}

func _ThubmnailDownloader_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThubmnailDownloaderServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ThubmnailDownloader/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThubmnailDownloaderServer).Download(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ThubmnailDownloader_ServiceDesc is the grpc.ServiceDesc for ThubmnailDownloader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThubmnailDownloader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.ThubmnailDownloader",
	HandlerType: (*ThubmnailDownloaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Download",
			Handler:    _ThubmnailDownloader_Download_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thumbnail.proto",
}
